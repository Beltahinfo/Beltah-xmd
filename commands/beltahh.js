const axios = require("axios");
const { keith } = require(__dirname + "/../keizzah/keith");
const { format } = require(__dirname + "/../keizzah/mesfonctions");
const os = require('os');
const moment = require("moment-timezone");
const conf = require(__dirname + "/../set");

const getContextInfo = (title = '', userJid = '', thumbnailUrl = '') => ({
  mentionedJid: [userJid],
  forwardingScore: 999,
  isForwarded: true,
  forwardedNewsletterMessageInfo: {
    newsletterJid: '120363249464136503@newsletter',
    newsletterName: 'Beltah Tech Updates',
    serverMessageId: Math.floor(100000 + Math.random() * 900000),
  },
  externalAdReply: {
    showAdAttribution: true,
    title: title || 'ùóïùóòùóüùóßùóîùóõ ùó†ùó®ùóüùóßùóú ùóóùóòùó©ùóúùóñùóò',
    body: 'ùóúùòÅ ùó∂ùòÄ ùóªùóºùòÅ ùòÜùó≤ùòÅ ùòÇùóªùòÅùó∂ùóπ ùó∂ùòÅ ùó∂ùòÄ ùó±ùóºùóªùó≤üóø',
    thumbnailUrl: thumbnailUrl || 'https://telegra.ph/file/dcce2ddee6cc7597c859a.jpg',
    sourceUrl: conf.GURL || '',
    mediaType: 1,
    renderLargerThumbnail: false,
  },
});

// Example usage within the existing context
keith({
  nomCom: 'repo',
  aliases: ['script', 'sc'],
  reaction: 'üõ∏',
  nomFichier: __filename,
}, async (command, reply, context) => {
  const { repondre, auteurMessage, nomAuteurMessage } = context;

  try {
    const response = await axios.get('https://api.github.com/repos/Beltah254/X-BOT');
    const repoData = response.data;

    if (repoData) {
      const repoInfo = {
        stars: repoData.stargazers_count * 11,
        forks: repoData.forks_count * 11,
        updated: repoData.updated_at,
        owner: repoData.owner.login,
      };

      const message = `·¥õ ú…™s …™s ${conf.BOT}  ô·¥è·¥õ, ·¥Ä ·¥° ú·¥Ä·¥õs·¥Ä·¥ò·¥ò ·¥Ñ ú·¥ú·¥Ö·¥Ö è  ô·¥ú·¥Ö·¥Ö è ·¥Ö·¥á·¥†·¥á ü·¥è·¥ò·¥á·¥Ö  ô è  ô·¥á ü·¥õ·¥Ä ú ·¥õ·¥á·¥Ñ ú ·¥õ·¥á·¥Ä·¥ç üöÄ

 ú·¥á Ä·¥á ·¥Ä Ä·¥á ·¥ç è  Ä·¥á·¥ò·¥è …™…¥“ì·¥è Ä·¥ç·¥Ä·¥õ…™·¥è…¥ 
‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÅ‚ä∑
‚ïë‚≠ê *·¥õ·¥è·¥õ·¥Ä ü s·¥õ·¥Ä Äs:* ${repoInfo.stars} 
‚ïëüç¥ *·¥õ·¥è·¥õ·¥Ä ü “ì·¥è Ä·¥ãs:* ${repoInfo.forks} 
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÅ‚ä∑
‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÅ‚ä∑
‚ïë  Ä·¥á ü·¥á·¥Äs·¥á ·¥Ö·¥Ä·¥õ·¥á : ${new Date(repoData.created_at).toLocaleDateString('en-GB')}
‚ïë  Ä·¥á·¥ò·¥è  ü…™…¥·¥ã: ${repoData.html_url} 
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÅ‚ä∑
${nomAuteurMessage}, ·¥Ö·¥è …¥·¥è·¥õ “ì·¥è Ä…¢·¥á·¥õ ·¥õ·¥è s·¥õ·¥Ä Ä üåü ·¥è·¥ú Ä  Ä·¥á·¥ò·¥è.

> ·¥ò·¥è·¥°·¥á Ä·¥á·¥Ö  ô è  ô·¥á ü·¥õ·¥Ä ú ·¥õ·¥á·¥Ñ ú ·¥õ·¥á·¥Ä·¥ç`;

      const contextInfo = getContextInfo(conf.BOT, auteurMessage, conf.URL);

      await reply.sendMessage(command, {
        text: message,
        contextInfo,
      });
    } else {
      repondre('An error occurred while fetching the repository data.');
    }
  } catch (error) {
    console.error('Error fetching repository data:', error);
    repondre('An error occurred while fetching the repository data.');
  }
});
