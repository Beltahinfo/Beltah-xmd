const { keith } = require('../keizzah/keith');
const axios = require('axios');
const wiki = require('wikipedia');
const conf = require(__dirname + "/../set");
const { repondre } = require(__dirname + "/../keizzah/context");

// Constants
const DEFAULT_PARTICIPANT = '0@s.whatsapp.net';
const DEFAULT_REMOTE_JID = 'status@broadcast';
const DEFAULT_THUMBNAIL_URL = 'https://telegra.ph/file/dcce2ddee6cc7597c859a.jpg';
const DEFAULT_TITLE = "BELTAH TECH BOT";
const DEFAULT_BODY = "Your AI Assistant Chuddy Buddy";

// Default message configuration
const fgg = {
  key: {
    fromMe: false,
    participant: DEFAULT_PARTICIPANT,
    remoteJid: DEFAULT_REMOTE_JID,
  },
  message: {
    contactMessage: {
      displayName: `Beltah Tech Info`,
      vcard: `BEGIN:VCARD\nVERSION:3.0\nN:;BELTAH MD;;;\nFN:BELTAH MD\nitem1.TEL;waid=${DEFAULT_PARTICIPANT.split('@')[0]}:${DEFAULT_PARTICIPANT.split('@')[0]}\nitem1.X-ABLabel:Ponsel\nEND:VCARD`,
    },
  },
};

/**
 * Construct contextInfo object for messages.
 * @param {string} title - Title for the external ad reply.
 * @param {string} userJid - User JID to mention.
 * @param {string} thumbnailUrl - Thumbnail URL.
 * @returns {object} - ContextInfo object.
 */
function getContextInfo(title = DEFAULT_TITLE, userJid = DEFAULT_PARTICIPANT, thumbnailUrl = DEFAULT_THUMBNAIL_URL) {
  try {
    return {
      mentionedJid: [userJid],
      forwardingScore: 999,
      isForwarded: true,
      forwardedNewsletterMessageInfo: {
         newsletterJid: "120363249464136503@newsletter",
         newsletterName: "ü§ñ ùêÅùêÑùêãùêìùêÄùêá ùêÄùêà ùêÇùêáùêÄùêìùêÅùêéùêì ü§ñ",
         serverMessageId: Math.floor(100000 + Math.random() * 900000),
     },
      externalAdReply: {
        showAdAttribution: true,
        title,
        body: DEFAULT_BODY,
        thumbnailUrl,
        sourceUrl: conf.GURL || '',
      },
    };
  } catch (error) {
    console.error(`Error in getContextInfo: ${error.message}`);
    return {}; // Prevent breaking on error
  }
    }

keith({
  nomCom: "read",
  reaction: 'üéé',
  categorie: "search"
}, async (dest, zk, commandeOptions) => {
  const { repondre, arg, ms } = commandeOptions;
  const reference = arg.join(" ");
  
  if (!reference) {
    return repondre("Please specify the book, chapter, and verse you want to read. Example: bible john 3:16", {
      contextInfo: getContextInfo("Bible Reference Required", '', "https://telegra.ph/file/dcce2ddee6cc7597c859a.jpg")
     }, { quoted: fgg }); 
  }
  
  try {
    const response = await axios.get(`https://bible-api.com/${reference}`);
    
    if (!response.data) {
      return repondre("ü§≤üïç  ‚îà‚îÄ‚Ä¢ *HOLY BIBLE* ‚Ä¢‚îÄ‚îà  üïçü§≤

 üí´ ùòàùò≠ùò≠ Holy books ùò¢ùòØùò• ùòµùò©ùò¶ùò™ùò≥ ùòØùò∂ùòÆùò£ùò¶ùò≥ùò¥ ùò≠ùò™ùò¥ùòµ
ùòßùò∞ùò≥ ùò®ùò¶ùòµùòµùò™ùòØùò® books ùòµùò∫ùò±ùò¶ ${s.PREFIXE}bible judges 2:3 Or ${s.PREFIXE}biblie judges 3:6üí´üå∏ 

üìú *Old Testament.* üìú
1 üß¨ Genesis (MWANZO)
2 ‚ôüÔ∏è Exodus (KUTOKA)
3. üï¥Ô∏è Leviticus (WALAWI)
4. üî¢ Numbers (HESABU)
5. üóûÔ∏è Deuteronomy (TORATI)
6. üçÅ Joshua (JOSHUA)
7. üë®‚Äç‚öñÔ∏è Judges (WAAMUZI)
8. üåπ Ruth (RUTH)
9. ü•Ä 1 Samuel (1SAMWELI)
10. üå∫ 2 Samuel (2 SAMWEL)
11. üå∑ 1 Kings (1 WAFALME)
12. üëë 2 Kings(2 WAFALME)
13. ü™∑ 1 Chronicles (1 WATHESALONIKE)
14. üå∏ 2 Chronicles (2 WATHESALONIKE)
15. üíÆ Ezra (EZRA)
16. üèµÔ∏è Nehemiah (NEHEMIA)
17. üåª Esther (ESTA)
18. üåº Job (AYUBU)
19. üçÇ Psalms (ZABURI)
20. üçÑ Proverbs (MITHALI)
21. üåæ Ecclesiastes (MHUBIRI)
22. üå± Song of Solomon (WIMBO WA SULEMAN)
23. üåø Isaiah (ISAYA)
24. üçÉ Jeremiah (YEREMIA)
25. ‚òòÔ∏è Lamentations (MAOMBOLEZO)
26. üçÄ Ezekiel (EZEKIEL)
27. ü™¥ Daniel (DANIEL)
28. üåµ Hosea (HESEA)
29. üå¥ Joel (JOEL)
30. üå≥ Amos (AMOSI)
31. üå≤ Obadiah (OBADIA)
32. ü™µ Jonah (YONA)
33. ü™π Micah (MIKA)
34. ü™∫ Nahum (NAHUM)
35. üèúÔ∏è Habakkuk (HABAKUKI)
36. üèûÔ∏è Zephaniah (ZEFANIA)
37. üèùÔ∏è Haggai (HAGAI)
38. üåÖ Zechariah (ZAKARIA)
39. üåÑ Malachi (MALAKI)

üìñ *New Testament.* üìñ
1. üåà Matthew (MATHAYO)
2. ‚òî Mark (MARKO)
3. üíß Luke (LUKA)
4. ‚òÅÔ∏è John (JOHN)
5. üå®Ô∏è Acts (MATENDO)
6. üåßÔ∏è Romans (WARUMI)
7. üå©Ô∏è 1 Corinthians (1 WAKORITHO)
8. üå¶Ô∏è 2 Corinthians (2 WAKORITHO)
9. ‚õàÔ∏è Galatians (WAGALATIA)
10. üå•Ô∏è Ephesians (WAEFESO)
11. ‚õÖ Philippians (WAFILIPI)
12. üå§Ô∏è Colossians (WAKOLOSAI)
13. ‚òÄÔ∏è 1 Thessalonians (1 WATHESALONIKE)
14. ü™ê 2 Thessalonians (2WATHESALONIKE)
15. üåû 1 Timothy (TIMOTHEO)
16. üåù 2 Timothy (2TIMOTHEO)
17. üåö Titus (TITO)
18. üåú Philemon (FILEMONI)
19. üåõ Hebrews (WAEBRANIA)
20. ‚≠ê James (JAMES)
21. üåü 1 Peter (1 PETER)
22. ‚ú® 2 Peter (2 PETER)
23. üí´ 1 John (1 JOHN)
24. üåô 2 John (2JOHN)
25. ‚òÑÔ∏è 3 John (3 JOHN)
26. üå† Jude (YUDA)
27. üåå Revelation (UFUNUO WA YOHANA)", {
        contextInfo: getContextInfo("Invalid Bible Reference", '', "https://telegra.ph/file/dcce2ddee6cc7597c859a.jpg")
      }, { quoted: fgg });
    }
    
    const data = response.data;
    const messageText = `
üìñ *${conf.BOT} HOLY SCRIPT* üìñ

‚ß≠ *WE'RE READING:* ${data.reference}

‚ß≠ *NUMBER OF VERSES:* ${data.verses.length}

‚ß≠ *NOW READ:* ${data.text}

‚ß≠ *LANGUAGE:* ${data.translation_name}

> ·¥ò·¥è·¥°·¥á Ä·¥á·¥Ö  ô è  ô ü·¥õ·¥Ä ú  ú·¥Ä·¥Ñ·¥ã…™…¥…¢ ·¥õ·¥á·¥Ä·¥ç`;
    
    await zk.sendMessage(dest, {
      text: messageText,
      contextInfo: getContextInfo("BELTAH-MD HOLY BIBLE", '', "https://telegra.ph/file/dcce2ddee6cc7597c859a.jpg")
    }, { quoted: fgg });
    
  } catch (error) {
    console.error("Error fetching Bible passage:", error);
    await repondre("An error occurred while fetching the Bible passage. Please try again later.", {
      contextInfo: getContextInfo("Error Fetching Bible Passage", '', "https://telegra.ph/file/dcce2ddee6cc7597c859a.jpg")
    });
  }
});
